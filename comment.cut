\section{Architettura del software}
Il firmware è principalmente suddiviso in due categorie di moduli:
\begin{itemize}
\item \textbf{Flight stack} : composta dalla parte che stima lo stato del sistema e il relativo controllo
\item \textbf{Middleware} : composta dalle interfacce che collegano i vari moduli interni di PX4 tra di loro e verso l'esterno, con la possibilità di integrare gli hardware utilizzati.
\end{itemize}

Il sistema quindi separa le varie funzionalità in moduli separati, eseguiti in modo indipendente che scambiano i dati e comandi tra di loro e con l'esterno attraverso messaggi asincroni.
Nella figura \ref{fig:px4.architettura} è riportato lo schema di alto livello del software di PX4 e la sua modularità.

\begin{figure}[ht]
\centering
\includegraphics[width=1\textwidth]{SistemaQuadrirotore/Figure/PX4_Architecture}
\caption{Architettura del codice di PX4 Autopilot}
\label{fig:px4.architettura}
\end{figure}
\subsection{Flight stack}
Il flight stack, mostrato in figura \ref{fig:px4.flightstack} è l'insieme di moduli che si occupano della stima dello stato del sistema e di tutti le funzionalità per il controllo,la guida e la navigazione. Esiste anche un modulo per interfacciarsi con il volo manuale attraverso radiocomando.
\begin{figure}[ht]
\centering
\includegraphics[width=1\textwidth]{SistemaQuadrirotore/Figure/PX4_High-Level_Flight-Stack}
\caption{Architettura del flight stack di PX4}
\label{fig:px4.flightstack}
\end{figure}
\paragraph{Estimator}
L'estimator è il modulo che prendendo i dati da uno o più sensori determina lo stato attuale del velivolo
\paragraph{Controller}
Si occupa di prendere in input i vari punti della pianificazione e confrontarli con lo stato attuale determinato dell'estimator. In questo modo vengono determinati i segnali di comando di output che saranno poi elaborati dal mixer.
\paragraph{Mixer}
Il mixer si occupa di determinare i segnali modulati ad impulsi che verranno utilizzati per il controllo del motore vero e proprio.
\subsection{Middleware}
Questo insieme di moduli si occupa invece di tutte le comunicazioni interne tra processi e tra PX4 e il mondo esterno. \'E composta principalmente dai driver per i sensori, i canali di comunicazione verso l'esterno e il bus di trasmissione di messaggi attraverso $\micro$ORB. In questo contesto ricade anche  la connessione con un simulatore per testare il codice generato nelle varie fasi di validazione.
\section{Strumenti per lo sviluppo del codice}
L'intero codice del firmware PX4 viene messo a disposizione attraverso la piattaforma github. Il progetto contiene all'interno le toolchain necessarie per compilare il sistema nei vari sistemi operativi. Agendo sulle varie possibili configurazioni di compilazione è possibile modificare e aggiunge delle funzionalità. Modificando le impostazioni di compilazioni si può generare il programma finale da caricare ed eseguire sull'autopilota.
Sono presenti anche delle configurazioni di compilazione per effettuare l'analisi e la verifica del codice generato attraverso l'utilizzo di un ambiente simulato. I simulatori che presentano una configurazione di base sono : Gazebo, jMAVSim , AirSim, Xplane. Per quanto riguarda questa tesi, verrà utilizzato il software Gazebo sfruttando parzialmente il codice già presente e adottando alcune modifiche. nulla vieta comunque di poter collegare un simulatore diverso attraverso la creazione di un interfaccia dati con il firmware. Infatti la connessione viene effettuata attraverso UDP, risultando quindi indipendente dalla compilazione del codice del firmware.
\subsection{MAVLink API}
Esiste modulo API specifico permette attraverso il protocollo MAVLink di interfacciarsi con il mondo esterno , compreso il simulatore. Attraverso il suo utilizzo avviene lo scampio dei dati per esempio dei sensori  , oppure lo stato di funzionamento del drone.

